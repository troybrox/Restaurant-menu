@page "/menu/detail/{id}"

@inject HttpClient Http
@using RestaurantMenu.ClientBlazorApp.ViewModels
@using RestaurantMenu.ClientBlazorApp.Infrastructure

@if (@*!_isModelSucceeded*@ _model==null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (/*!_isModelNotEmpty*/ _model==null)
    {
        <div>
            <p>Упс, информации о блюде нет...</p>
        </div>
    }
    else
    {
        <div>
            <h4 class="text-black-50">Информация о блюде</h4>
        </div>
        <div>
            <div class="form-group">
                <label><b>Название</b></label><br />
                <p form-control>@_model.Name</p>
            </div>
            <div class="form-group">
                <label><b>Дата добавления в меню</b></label><br />
                <p form-control>@GetDate(@_model.AddingDate) </p>
            </div>
            <div class="form-group">
                <label><b>Состав</b></label><br />
                <p>@_model.Composition</p>
            </div>
            <div class="form-group">
                <label><b>Описание</b></label><br />
                <p>@_model.Description</p>
            </div>
            <div class="form-group">
                <label><b>Вес в граммах</b></label><br />
                <p>@_model.Mass</p>
            </div>
            <div class="form-group">
                <label><b>Калорийность одной порции</b></label><br />
                <p>@GetCalories(_model.CalorieContent, _model.Mass) кал</p>
            </div>
            <div class="form-group">
                <label><b>Время приготовления</b></label><br />
                <p>@GetTimeByMinutes(_model.CookingTime)</p>
            </div>
            <div class="form-group">
                <label><b>Цена</b></label><br />
                <p>@_model.Price рублей</p>
            </div>
        </div>
    }
}

@code {

    [Parameter]
    public string id { get; set; }

    public static DishViewModel _model { get; set; }

    private bool _isModelSucceeded = false;
    private bool _isModelNotEmpty = false;

    protected async override Task OnInitializedAsync()
    {
        //todo: requestMessage - send id
        var requesResult = await Http.GetJsonAsync<RequestResult<DishViewModel>>
            ("https://localhost:44318/api/menu/dish/" + id.ToString());
        if (requesResult.Succeeded)
        {
            _isModelSucceeded = true;
            if ((_model = requesResult.Data) != null)
                _isModelNotEmpty = true;
        }
    }


    private string GetTimeByMinutes(int minutes)
    {
        int hourCount = 0;
        int minCount = 0;

        if (minutes > 59)
        {
            hourCount = minutes / 60;
            minCount = minutes - hourCount * 60;

            return hourCount.ToString() + " час " + minCount.ToString() + " мин";
        }
        else
        {
            return minutes.ToString() + " мин";
        }
    }

    private int GetCalories(decimal calContent, int mass)
    {
        return (int)calContent * mass / 100;
    }

    private string GetDate(DateTime date)
    {
        return date.ToString("g");
    }
}
