@page "/create"

@inject HttpClient Http
@inject NavigationManager navigationManager
@using System.ComponentModel.DataAnnotations;
@using RestaurantMenu.ClientBlazorApp.Infrastructure
@using RestaurantMenu.ClientBlazorApp.ViewModels
@using RestaurantMenu.ClientBlazorApp.DTO
@using Microsoft.AspNetCore.Components.WebAssembly.Http

<h4 class="text-black-50">Добавление нового блюда в меню</h4>

@{
    if (String.IsNullOrEmpty(ErrorMessage))
    {
        if (AddingDishErrorMessage.Count > 0)
        {
            <div>
                @foreach (var error in AddingDishErrorMessage)
                {
                    <label>Ошибка при добавления блюда</label>
                    <p>
                        @error
                    </p>
                }
            </div>
        }
        if (!String.IsNullOrEmpty(ValidateMessage))
        {
            <div>
                <label>Ошибка при добавления блюда</label>
                <p>
                    @ValidateMessage
                </p>
            </div>
        }

        <EditForm EditContext="@EditContext">
            <DataAnnotationsValidator />

            <div class="form-group">
                <div class="form-group">
                    <label for="name">Название</label><br />
                    <InputText id="name" class="form-control col-3" @bind-Value=_model.Name></InputText>
                    <ValidationMessage For="@(() => _model.Name)" />
                </div>
                <div class="form-group">
                    <label for="composition">Состав</label><br />
                    <InputTextArea id="composition" rows="3" class="form-control col-3" @bind-Value="_model.Composition"></InputTextArea>
                    <ValidationMessage For="@(() => _model.Composition)" />
                </div>
                <div class="form-group">
                    <label for="description">Описание</label><br />
                    <InputTextArea id="description" rows="3" class="form-control col-3" @bind-Value="_model.Description"></InputTextArea>
                    <ValidationMessage For="@(() => _model.Description)" />
                </div>
                <div class="form-group">
                    <label for="mass">Вес в граммах</label><br />
                    <InputNumber id="mass" class="form-control col-3" @bind-Value="_model.Mass"></InputNumber>
                    <ValidationMessage For="@(() => _model.Mass)" />
                </div>
                <div class="form-group">
                    <label for="calorieContent">Калорийность</label><br />
                    <InputNumber id="calorieContent" class="form-control col-3" @bind-Value="_model.CalorieContent"></InputNumber>
                    <ValidationMessage For="@(() => _model.CalorieContent)" />
                </div>
                <div class="form-group">
                    <label for="cookingTime">Время приготовления в минутах</label><br />
                    <InputNumber id="cookingTime" class="form-control col-3" @bind-Value="_model.CookingTime"></InputNumber>
                    <ValidationMessage For="@(() => _model.CookingTime)" />
                </div>
                <div class="form-group">
                    <label for="price">Цена</label><br />
                    <InputNumber id="price" class="form-control col-3" @bind-Value="_model.Price"></InputNumber>
                    <ValidationMessage For="@(() => _model.Price)" />
                </div>
                <div>
                    <button class="btn btn-primary" disabled="@SaveDisabled" @onclick="(e => AddDish())">Добавить блюдо</button>
                    <button class="btn btn-light" @onclick="(e => GetMenu())">Отмена</button>
                </div>
            </div>

        </EditForm>

    }

    else
    {
        <div>
            <div class="form-group">
                <label>Произошла ошибка:</label>
                <p>@ErrorMessage</p>
            </div>

            <button class="btn btn-light" @onclick="(e => GetMenu())">Назад к меню</button>
        </div>
    }
}



@code {
    private DishDTO _model { get; set; } = new DishDTO();
    private EditContext EditContext;
    protected string SaveDisabled { get; set; } = "disabled";

    private System.Net.HttpStatusCode? _responseStatusCode;

    private string ErrorMessage { get; set; } = "";

    [Parameter]
    public string ValidateMessage { get; set; } = "";

    private List<string> AddingDishErrorMessage { get; set; } = new List<string>();


    private const string postURI = "https://localhost:44318/api/menu";


    protected override Task OnInitializedAsync()
    {
        EditContext = new EditContext(_model);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;

        return base.OnInitializedAsync();
    }

    private async Task AddDish()
    {
        if (_model == null)
        {
            ValidateMessage = "Заполните поля блюда!";
            await OnInitializedAsync();
        }

        else
        {
            try
            {
                var requestResult = await Http.PostJsonAsync<RequestResult>(postURI + "/dish/add", _model);

                if (requestResult.Succeeded)
                {
                    try
                    {
                        await GetMenu();
                    }
                    catch (Exception e)
                    {
                        ErrorMessage = e.Message;
                        await OnInitializedAsync();
                    }
                }

                else
                {
                    foreach (var error in requestResult.ErrorMessages)
                    {
                        AddingDishErrorMessage.Add(error);
                    }

                    await OnInitializedAsync();

                }
            }
            catch (Exception e)
            {
                ErrorMessage = e.Message;

            }
        }

    }


    protected override void OnAfterRender(bool firstRender)
    {
        SetOkDisabledStatus();
        base.OnAfterRender(firstRender);
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        SetOkDisabledStatus();
    }

    private void SetOkDisabledStatus()
    {
        if (EditContext.Validate())
        {
            SaveDisabled = null;
        }
        else
        {
            SaveDisabled = "disabled";
        }
    }

    private async Task GetMenu()
    {
        navigationManager.NavigateTo("/");
    }
}
