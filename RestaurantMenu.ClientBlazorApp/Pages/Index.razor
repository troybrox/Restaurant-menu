@page "/"

@inject HttpClient Http
@inject NavigationManager navigationManager

@using RestaurantMenu.ClientBlazorApp.ViewModels
@using RestaurantMenu.ClientBlazorApp.Infrastructure

@using RestaurantMenu.ClientBlazorApp.Pages

<style>
    .myheader {
        float: left;
    }

    th {
        text-align: left;
        font-size: 14px;
        height: 100px;
        vertical-align: top;
    }

    td {
        font-size: 14px;
    }

    table {
        table-layout: fixed;
        width: 100%
    }

    thead-light {
        height: 80px;
    }

    .trhead {
        height: 80px;
    }

    .tablehead {
        height: inherit;
    }


    .col_s {
        width: 40px;
    }

    .col_m {
        width: 130px;
    }

    .col_l {
        width: 280px;
    }

    .wrapper {
        vertical-align: top;
    }
</style>


@if (!_isMenuSucceeded)
{
    <p><em>Loading...</em></p>
    if (errorMessages != null)
    {
        <p>
            <b>При загрузке меню произошли ошибки:</b>
        </p>
        foreach (var error in errorMessages)
        {
            <p>
                @error
            </p>
        }
    }
}
else
{
    <div>
        <h4 class="text-black-50">Меню блюд</h4>
        <div style="margin: 20px 20px 20px 20px">
            <form>
            </form>
            <div>
                <p>Фильтры:</p>
                <div class="form-group">
                    <label>Название блюда</label><br />
                    <input type="text" name="SearchNameString" class="form-control col-3" placeholder="" @bind="SearchNameString" />
                </div>
                <div class="form-group">
                    <label>Описание и состав</label><br />
                    <input type="text" name="SearchDescrCompString" class="form-control col-3" placeholder="" @bind="SearchDescrCompString" />
                </div>
                <div class="form-row">
                    <div class="col-4 form-group">
                        <label for="MinMass">Минимальный вес порции</label><br />
                        <input type="number" id="MinMass" class="form-control col-3" placeholder=".col-6 .col-sm-4" @bind="MinMass" />
                    </div>
                    <div class="col-4 form-group">
                        <label for="MaxMass">Максимальный вес порции</label><br />
                        <input type="number" id="MaxMass" class="form-control col-3" placeholder=".col-6 .col-sm-4" @bind="MaxMass" />
                    </div>
                </div>

                <div class="form-row">
                    <div class="col-4 form-group">
                        <label for="MinTime">Минимальное время готовки</label><br />
                        <input type="number" id="MinTime" class="form-control col-3" placeholder=".col-6 .col-sm-4" @bind="MinTime" />
                    </div>
                    <div class="col-4 form-group">
                        <label for="MaxTime">Максимальное время готовки</label><br />
                        <input type="number" id="MaxTime" class="form-control col-3" placeholder=".col-6 .col-sm-4" @bind="MaxTime" />
                    </div>
                </div>
                <div>
                    <button class="btn btn-primary" @onclick="(e => FilterMenuAsync(SearchNameString, SearchDescrCompString))">Применить</button>
                    <button class="btn btn-light" @onclick="(e => ClearFiltersAsync())">Сбросить фильтры</button>
                </div>
            </div>
        </div>
    </div>

    <body>
        <div>
            <center>
                <table class="table">
                    <thead class="thead-light">
                        <tr class="trhead">

                            <th class="col_s">
                                <div class="tablehead">
                                    <a href>
                                        <span @onclick="@(e => OrderMenuBy("Id"))">№</span>
                                    </a>
                                </div>
                            </th>

                            <th class="col_m">
                                <div class="tablehead">
                                    <div>
                                        <a href>
                                            <span @onclick="@(e => OrderMenuBy("Name"))">Название</span>
                                        </a>
                                    </div>
                                    <div>
                                        @{
                                            if (SortName.Contains("Name"))
                                            {
                                                <a>
                                                    Отсортировано: @IndicateSort
                                                </a>
                                            }
                                        }
                                    </div>
                                </div>
                            </th>

                            <th class="col_l">
                                <div class="tablehead">
                                    <div>
                                        <a href>
                                            <span @onclick="@(e => OrderMenuBy("Description"))">Описание</span>
                                        </a>
                                    </div>
                                    <div>
                                        @{
                                            if (SortName.Contains("Description"))
                                            {
                                                <a>Отсортировано: @IndicateSort</a>
                                            }
                                        }
                                    </div>
                                </div>
                            </th>

                            <th class="col_l">
                                <div class="tablehead">
                                    <div>
                                        <a href>
                                            <span @onclick="@(e => OrderMenuBy("Composition"))">Состав</span>
                                        </a>
                                    </div>
                                    <div>
                                        @{
                                            if (SortName.Contains("Composition"))
                                            {
                                                <a>Отсортировано: @IndicateSort</a>
                                            }
                                        }
                                    </div>
                                </div>
                            </th>

                            <th class="col_m">
                                <div class="tablehead">
                                    <div>
                                        <a href>
                                            <span @onclick="@(e => OrderMenuBy("AddingDate"))">Дата добавления</span>
                                        </a>
                                    </div>
                                    <div>
                                        @{
                                            if (SortName.Contains("AddingDate"))
                                            {
                                                <a>Отсортировано: @IndicateSort</a>
                                            }
                                        }
                                    </div>
                                </div>
                            </th>

                            <th class="col_m">
                                <div class="tablehead">
                                    <div>
                                        <a href>
                                            <span @onclick="@(e => OrderMenuBy("CalorieContent"))">Калорийность порции</span>
                                        </a>
                                    </div>
                                    <div>
                                        @{
                                            if (SortName.Contains("CalorieContent"))
                                            {
                                                <a>Отсортировано: @IndicateSort</a>
                                            }
                                        }
                                    </div>
                                </div>
                            </th>

                            <th class="col_m">
                                <div class="tablehead">
                                    <div>
                                        <a href>
                                            <span @onclick="@(e => OrderMenuBy("CookingTime"))">Время приготовления</span>
                                        </a>
                                    </div>
                                    <div>
                                        @{
                                            if (SortName.Contains("CookingTime"))
                                            {
                                                <a>Отсортировано: @IndicateSort</a>
                                            }
                                        }
                                    </div>
                                </div>
                            </th>

                            <th class="col_m">
                                <div class="tablehead">
                                    <div>
                                        <a href>
                                            <span @onclick="@(e => OrderMenuBy("Mass"))">Вес порции</span>
                                        </a>
                                    </div>
                                    <div>
                                        @{
                                            if (SortName.Contains("Mass"))
                                            {
                                                <a>Отсортировано: @IndicateSort</a>
                                            }
                                        }
                                    </div>
                                </div>
                            </th>

                            <th class="col_m">
                                <div class="tablehead">
                                    <div>
                                        <a href>
                                            <span @onclick="@(e => OrderMenuBy("Price"))">Цена</span>
                                        </a>
                                    </div>
                                    <div>
                                        @{
                                            if (SortName.Contains("Price"))
                                            {
                                                <a>Отсортировано: @IndicateSort</a>
                                            }
                                        }
                                    </div>
                                </div>
                            </th>

                            <th class="col_m" style="height:inherit; vertical-align:middle;">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_isMenuNotEmpty)
                        {
                            @foreach (var dish in _dishes)
                            {
                                <tr>
                                    <th scope="row" class="col_s">@dish.Id</th>
                                    <td class="col_m">@dish.Name</td>
                                    <td class="col_l">@dish.Description</td>
                                    <td class="col_l">@dish.Composition</td>
                                    <td class="col_m">@GetDate(dish.AddingDate)</td>
                                    <td class="col_m">@GetCalories(dish.CalorieContent, dish.Mass) ккал</td>
                                    <td class="col_m">@GetTimeByMinutes(dish.CookingTime)</td>
                                    <td class="col_m">@dish.Mass г</td>
                                    <td class="col_m">@dish.Price руб</td>
                                    <td class="col_m">
                                        <ul class="nav flex-row">
                                            <li class="nav-item px-2">
                                                <NavLink class="btn-link">
                                                    <span class="oi oi-pencil" @onclick="@(e => OpenUpdate(dish.Id.ToString()))" aria-hidden="true"></span>
                                                </NavLink>
                                            </li>
                                            <li class="nav-item px-2">
                                                <NavLink class="btn-link">
                                                    <span class="oi oi-trash" @onclick="@(e => Delete(dish.Id))" aria-hidden="true"></span>
                                                </NavLink>
                                            </li>
                                            <li class="nav-item px-2">
                                                <NavLink class="btn-link">
                                                    <span class="oi oi-eye" @onclick="@(e => OpenDetail(dish.Id.ToString()))"></span>
                                                </NavLink>
                                            </li>
                                        </ul>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>Список меню пуст!</tr>
                        }

                    </tbody>
                </table>
            </center>
        </div>


        <div>
            <button class="btn btn-light" disabled="@BtnBackDisable" @onclick="(e => PageBack())">Назад</button>
            <button class="btn btn-light" disabled="@BtnNextDisable" @onclick="(e => PageNext())">Вперёд</button>
            <a>Страница @CurrrentPageIndex из @TotalPages</a>
        </div>


    </body>
}

@code {

    [Parameter]
    public string SortName { get; set; } = "";

    [Parameter]
    public bool SortIsAscending { get; set; } = true;

    [Parameter]
    public string SearchNameString { get; set; } = "";

    [Parameter]
    public string SearchDescrCompString { get; set; } = "";

    [Parameter]
    public int MinMass { get; set; }

    [Parameter]
    public int MaxMass { get; set; }

    [Parameter]
    public int MinTime { get; set; }

    [Parameter]
    public int MaxTime { get; set; }

    [Parameter]
    public static int PageIndexParam { get; set; }

    public int TotalPages { get; set; }
    public int CurrrentPageIndex { get; set; } = 1;

    ListRequestResult<List<DishViewModel>> requestResult;

    private bool BtnNextDisable { get; set; }
    private bool BtnBackDisable { get; set; }


    public bool HasPreviousPage
    {
        get
        {
            return (CurrrentPageIndex > 1);
        }
    }

    public bool HasNextPage
    {
        get
        {
            return (CurrrentPageIndex < TotalPages);
        }
    }



    private List<string> errorMessages { get; set; }

    private SortDefinition Sort { get; set; }

    public string IndicateSort { get; set; }

    private string _sortIndLetterAsc { get; set; } = "А..Я";
    private string _sortIndLetterDesc { get; set; } = "Я..А";
    private string _sortIndSymbolsAsc { get; set; } = "по возрастанию";
    private string _sortIndSymbolsDesc { get; set; } = "по убыванию";
    private string _sortIndDateAsc { get; set; } = "сначала старые";
    private string _sortIndDateDesc { get; set; } = "сначала новые";

    private bool _isMenuSucceeded = false;
    private bool _isMenuNotEmpty = false;

    private List<DishViewModel> _dishes;
    private DishViewModel _editModel = new DishViewModel();


    protected override async Task OnInitializedAsync()
    {
        string uriPath = "https://localhost:44318/api/menu";

        string uriPostMethod = "https://localhost:44318/api/menu/filtered-dishes";

        SortDefinition sort = new SortDefinition();

        List<FilterDefinition> filters = new List<FilterDefinition>();

        if (String.IsNullOrEmpty(SortName))
        {
            sort.Name = "Id";
            sort.IsAscending = true;
        }
        else
        {
            sort.Name = SortName;
            sort.IsAscending = SortIsAscending;
        }

        if (!String.IsNullOrEmpty(SearchNameString))
        {
            filters.Add(
                new FilterDefinition
                {
                    Name = "Name",
                    Value = SearchNameString
                });
        }

        if (!String.IsNullOrEmpty(SearchDescrCompString))
        {
            filters.Add(
                new FilterDefinition
                {
                    Name = "DescrComp",
                    Value = SearchDescrCompString
                });
        }

        if (MinMass > 0)
        {
            filters.Add(
                new FilterDefinition
                {
                    Name = "MinMass",
                    Value = MinMass.ToString()
                });
        }

        if (MaxMass > 0)
        {
            filters.Add(
                new FilterDefinition
                {
                    Name = "MaxMass",
                    Value = MaxMass.ToString()
                });
        }

        if (MinTime > 0)
        {
            filters.Add(
                new FilterDefinition
                {
                    Name = "MinTime",
                    Value = MinTime.ToString()
                });
        }

        if (MaxTime > 0)
        {
            filters.Add(
                new FilterDefinition
                {
                    Name = "MaxTime",
                    Value = MaxTime.ToString()
                });
        }

        requestResult = await Http.SendJsonAsync<ListRequestResult<List<DishViewModel>>>
            (HttpMethod.Post,
            uriPostMethod,
            new MenuRequestObject
            {
                PageIndex = CurrrentPageIndex,
                Sort = sort,
                Filters = filters
            });

        if (requestResult.Succeeded)
        {
            _isMenuSucceeded = true;
            if ((_dishes = requestResult.Data) != null)
            {
                _isMenuNotEmpty = true;

                TotalPages = requestResult.TotalPages;
                BtnBackDisable = !requestResult.HasPreviousPage;
                BtnNextDisable = !requestResult.HasNextPage;
            }
        }

        else
        {
            errorMessages = requestResult.ErrorMessages;
        }

        SetSortIndicate();
        SetButtonDisable();
    }


    private string SetSortIndicate()
    {
        string _sortIndicate = "";
        if (!String.IsNullOrEmpty(SortName))
        {
            if (SortIsAscending)
            {
                if (SortName == "Name" || SortName == "Description" || SortName == "Composition")
                {
                    _sortIndicate = _sortIndLetterAsc;
                }
                else if (SortName == "Price" || SortName == "Mass" || SortName == "CalorieContent" ||
                    SortName == "CookingTime")
                {
                    _sortIndicate = _sortIndSymbolsAsc;
                }
                else if (SortName == "AddingDate")
                {
                    _sortIndicate = _sortIndDateAsc;
                }
            }
            else
            {
                if (SortName == "Name" || SortName == "Description" || SortName == "Composition")
                {
                    _sortIndicate = _sortIndLetterDesc;
                }
                else if (SortName == "Price" || SortName == "Mass" || SortName == "CalorieContent" ||
                    SortName == "CookingTime")
                {
                    _sortIndicate = _sortIndSymbolsDesc;
                }
                else if (SortName == "AddingDate")
                {
                    _sortIndicate = _sortIndDateDesc;
                }
            }
        }

        IndicateSort = _sortIndicate;
        return (_sortIndicate);
    }

    private void OpenDetail(string id) => navigationManager.NavigateTo("/menu/detail/" + id);

    private void OpenUpdate(string id) => navigationManager.NavigateTo("/menu/update/" + id);

    private async Task<RequestResult> Delete(int dishId)
    {
        string deleteURI = "https://localhost:44318/api/menu/dish/delete/";
        int id = dishId;

        try
        {
            var requestResult = await Http.SendJsonAsync<RequestResult>
            (HttpMethod.Post,
            deleteURI, id);
        }
        catch(Exception e)
        {
            List<string> errors = new List<string>();
            return new RequestResult { Succeeded = false, ErrorMessages = errors };
        }

        await OnInitializedAsync();
        return requestResult;
    }

    private async Task OrderMenuBy(string sortNameParam)
    {
        string xSortName = "";
        xSortName = SortName;

        if (!SortIsAscending)
        {
            if (sortNameParam == xSortName)
            {
                SortIsAscending = true;
            }
            else
            {
                SortName = sortNameParam;
                SortIsAscending = true;
            }
        }
        else
        {
            if (sortNameParam == SortName)
            {
                SortIsAscending = false;
            }
            else
            {
                SortName = sortNameParam;
                SortIsAscending = true;
            }
        }

        await OnInitializedAsync();
    }

    private async Task FilterMenuAsync(string name, string descComp)
    {
        SearchNameString = name;
        SearchDescrCompString = descComp;
        await OnInitializedAsync();
    }

    private async Task ClearFiltersAsync()
    {
        SearchNameString = "";
        SearchDescrCompString = "";
        MinMass = 0;
        MaxMass = 0;
        MinTime = 0;
        MaxTime = 0;
        await OnInitializedAsync();
    }

    private string GetTimeByMinutes(int minutes)
    {
        int hourCount = 0;
        int minCount = 0;

        if (minutes > 59)
        {
            hourCount = minutes / 60;
            minCount = minutes - hourCount * 60;

            return hourCount.ToString() + " час " + minCount.ToString() + " мин";
        }
        else
        {
            return minutes.ToString() + " мин";
        }
    }

    private void SetButtonDisable()
    {
        BtnBackDisable = !(CurrrentPageIndex > 1);
        BtnNextDisable = !(CurrrentPageIndex < TotalPages);
    }

    private int GetCalories(decimal calContent, int mass)
    {
        return (int)calContent * mass / 100;
    }

    private string GetDate(DateTime date)
    {
        return date.ToString("g");
    }

    private async Task PageNext()
    {
        CurrrentPageIndex++;
        await OnInitializedAsync();
    }

    private async Task PageBack()
    {
        CurrrentPageIndex--;
        await OnInitializedAsync();
    }

    private async Task PageNavigate(int num)
    {
        CurrrentPageIndex = num;
        await OnInitializedAsync();
    }


}



